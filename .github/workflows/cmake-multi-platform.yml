name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Python dependencies
      run: |
        pip install pandas matplotlib

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_STANDARD=17
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Run executable (generate results.csv)
      shell: bash
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        executable_name="performance_test"
        
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            executable_name = "performance_test.exe"
            executable_path="Release/$executable_name"  # Windows binary is in Release/
            else
              executable_path="./$executable_name"  # Linux/macOS binary
            fi
          
          if [ -f "$executable_path" ]; then
              echo "Executable found, running it..."
              "$executable_path" --iterations 500 --trials 30
            else
              echo "Error: Executable not found at $executable_path"
              exit 1
            fi

    - name: Check that CSV was created
      run: test -f build/results.csv

    - name: Show CSV output (preview)
      run: head build/results.csv

    - name: Run Python visualization
      run: python plot_results.py

    - name: Upload results (OS=${{ matrix.os }}, Compiler=${{ matrix.c_compiler }})
      uses: actions/upload-artifact@v4
      with:
        name: results-and-plot-${{ matrix.os }}-${{ matrix.c_compiler }}
        path: |
          build/results.csv
          timing_comparison_plot.png
